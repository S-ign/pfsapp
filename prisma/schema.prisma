// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role Role @default(BASIC)
  accounts      Account[]
  sessions      Session[]
  grossMonthlyIncome GrossMonthlyIncome?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Salary {
  id        String @id @default(cuid())
  key       String?
  Name      String?
  Date      String?
  Notes     String?
  Amount    String?
  gmiId     String
  grossMonthlyIncome GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model RealEstateRental {
  id        String   @id @default(cuid())
  key       String?
  Name      String?
  Date  String?
  Notes     String?
  Amount    String?
  gmiId     String
  grossMonthlyIncome   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model Business {
  id        String   @id @default(cuid())
  key       String?
  Name      String?
  Date  String?
  Notes     String?
  Amount    String?
  gmiId     String
  grossMonthlyIncome   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model DividendStock {
  id        String   @id @default(cuid())
  key       String?
  Name      String?
  Date  String?
  Notes     String?
  Amount    String?
  gmiId     String
  grossMonthlyIncome   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model GMIOther {
  id        String   @id @default(cuid())
  key       String?
  Name      String?
  Date  String?
  Notes     String?
  Amount    String?
  gmiId     String
  grossMonthlyIncome   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model GrossMonthlyIncome {
  id                 String   @id @default(cuid())
  Salary           Salary[]
  RealEstateRentals  RealEstateRental[]
  Business         Business[]
  DividendStocks     DividendStock[]
  Other             GMIOther[]
  userId             String @unique
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Mortgage {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  propertyID     String
  property   Property @relation(fields: [propertyID], references: [id], onDelete: Cascade)
}

model Rent {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  propertyID     String @unique
  property   Property @relation(fields: [propertyID], references: [id], onDelete: Cascade)
}

model Insurance {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  notes     String
  amount    String
  propertyID     String
  property   Property @relation(fields: [propertyID], references: [id], onDelete: Cascade)
}

model PropertyTax {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  propertyID     String @unique
  property   Property @relation(fields: [propertyID], references: [id], onDelete: Cascade)
}

model HomeMaintenance {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  propertyID     String
  property   Property @relation(fields: [propertyID], references: [id], onDelete: Cascade)
}

model HomeIncidentals {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  propertyID     String
  property   Property @relation(fields: [propertyID], references: [id], onDelete: Cascade)
}

model Electricity {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  propertyId  String @unique
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Water {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  propertyId  String @unique
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Garbage {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  propertyId  String @unique
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Gas {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  propertyId  String @unique
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Internet {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  propertyId  String @unique
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PhonePlan {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  gmeID  String
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model Property {
  id  String   @id @default(cuid())
  electricity Electricity?
  mortgage Mortgage[]
  rent Rent?
  insurance Insurance[]
  propertyTax PropertyTax?
  homeMaintenance HomeMaintenance[]
  homeIncidentals HomeIncidentals[]
  water Water?
  garbage Garbage?
  gas Gas?
  internet Internet?
  marketValue   String
  gmeID  String
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model AutoLoan {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  carId       String
  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model AutoInsurance {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  carId       String
  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model FuelCosts {
  id          String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  carId       String @unique
  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model AutoMaintenance {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  carId       String
  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model Car {
  id  String   @id @default(cuid())
  autoLoan AutoLoan[]
  autoInsurance AutoInsurance[]
  fuelCosts FuelCosts?
  autoMaintenance AutoMaintenance[]
  gmeID  String
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model Groceries {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  gmeID  String @unique
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model DiningOut {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  gmeID  String @unique
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model HealthInsurance {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  gmeID  String @unique
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}
model VisionInsurance {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  gmeID  String @unique
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}
model DentalInsurance {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  gmeID  String @unique
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}
model ChildCare {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  gmeID  String @unique
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}
model ChildExpenses {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  gmeID  String @unique
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}
model StudentLoan {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  gmeID  String @unique
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model LineOfCredit {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  provider    String
  gmeID  String
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model CreditCard {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  provider    String
  gmeID  String
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model PersonalLoan {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  provider    String
  gmeID  String
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model GMEOther {
  id  String   @id @default(cuid())
  due         DateTime?
  notes       String
  amount      String
  provider    String
  gmeID  String
  grossMonthlyExpenses GrossMonthlyExpenses @relation(fields: [gmeID], references: [id], onDelete: Cascade)
}

model GrossMonthlyExpenses {
  id  String   @id @default(cuid())
  phonePlan PhonePlan[]
  property Property[]
  car Car[]
  groceries Groceries?
  diningOut DiningOut?
  healthInsurance HealthInsurance?
  visionInsurance VisionInsurance?
  dentalInsurance DentalInsurance?
  childCare ChildCare?
  childExpenses ChildExpenses?
  studentLoan StudentLoan?
  lineOfCredit LineOfCredit[]
  creditCard CreditCard[]
  personalLoan PersonalLoan[]
  other GMEOther[]
}

model MutualFund {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model Stock {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model Annuity {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model CashValueLifeInsurance {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model SavingsAccount {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model CheckingsAccount {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model Retirement {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model Roth {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model Pension {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model CertificateOfDeposit {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model OtherAsset {
  id         String   @id @default(cuid())
  name       String
  value      String
  intrest    String
  dividends  String
  assetID    String
  assets     Assets @relation(fields: [assetID], references: [id], onDelete: Cascade)
}

model Assets {
  id                      String   @id @default(cuid())
  mutualFunds             MutualFund[]
  stocks                  Stock[]
  annuity                 Annuity[]
  cashValueLifeInsurance  CashValueLifeInsurance[]
  savingsAccount          SavingsAccount[]
  checkingsAccount        CheckingsAccount[]
  retirement              Retirement[]
  roth                    Roth[]
  pension                 Pension[]
  certificateOfDeposit    CertificateOfDeposit[]
  OtherAsset              OtherAsset[]
}

enum Role {
  BASIC
  ADMIN
}
