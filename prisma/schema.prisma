// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Salary {
  id        String @id @default(cuid())
  received  DateTime?
  name     String
  notes     String
  amount    String
  gmiId     String
  gmiInfo   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model RealEstateRental {
  id        String   @id @default(cuid())
  received  DateTime?
  name     String
  notes     String
  amount    String
  gmiId     String
  gmiInfo   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model Business {
  id        String   @id @default(cuid())
  received  DateTime?
  name     String
  notes     String
  amount    String
  gmiId     String
  gmiInfo   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model DividendStock {
  id        String   @id @default(cuid())
  received  DateTime?
  name     String
  notes     String
  amount    String
  gmiId     String
  gmiInfo   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model GMIOther {
  id        String   @id @default(cuid())
  received  DateTime?
  name     String
  notes     String
  amount    String
  gmiId     String
  gmiInfo   GrossMonthlyIncome @relation(fields: [gmiId], references: [id], onDelete: Cascade)
}

model GrossMonthlyIncome {
  id                 String   @id @default(cuid())
  salaries           Salary[]
  realEstateRentals  RealEstateRental[]
  businesses         Business[]
  dividendStocks     DividendStock[]
  others             GMIOther[]
}

model Mortgage {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  gmeId     String
  gmeInfo   GrossMonthlyExpenses @relation(fields: [gmeId], references: [id], onDelete: Cascade)
}

model Rent {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  gmeId     String
  gmeInfo   GrossMonthlyExpenses @relation(fields: [gmeId], references: [id], onDelete: Cascade)
}

model Insurance {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  notes     String
  amount    String
  gmeId     String
  gmeInfo   GrossMonthlyExpenses @relation(fields: [gmeId], references: [id], onDelete: Cascade)
}

model PropertyTax {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  gmeId     String
  gmeInfo   GrossMonthlyExpenses @relation(fields: [gmeId], references: [id], onDelete: Cascade)
}

model HomeMaintenance {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  gmeId     String
  gmeInfo   GrossMonthlyExpenses @relation(fields: [gmeId], references: [id], onDelete: Cascade)
}

model HomeIncidentals {
  id        String   @id @default(cuid())
  due       DateTime?
  name      String
  address   String
  notes     String
  amount    String
  gmeId     String
  gmeInfo   GrossMonthlyExpenses @relation(fields: [gmeId], references: [id], onDelete: Cascade)
}

model Electricity {
  id          String   @id @default(cuid())
  due         DateTime?
  provider    String
  notes       String
  amount      String
  propertyId  String @unique
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Property {
  id  String   @id @default(cuid())
  electricity Electricity?
}

model GrossMonthlyExpenses {
  id  String   @id @default(cuid())
  mortgages Mortgage[]
  rent Rent[]
  insurance Insurance[]
  propertyTax PropertyTax[]
  homeMaintenance HomeMaintenance[]
  homeIncidentals HomeIncidentals[]
}
